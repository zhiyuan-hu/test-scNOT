Search.setIndex({"docnames": ["cellot", "cellot.data", "cellot.losses", "cellot.models", "cellot.networks", "cellot.train", "cellot.utils", "index", "modules", "usage"], "filenames": ["cellot.rst", "cellot.data.rst", "cellot.losses.rst", "cellot.models.rst", "cellot.networks.rst", "cellot.train.rst", "cellot.utils.rst", "index.rst", "modules.rst", "usage.rst"], "titles": ["cellot package", "cellot.data package", "cellot.losses package", "cellot.models package", "cellot.networks package", "cellot.train package", "cellot.utils package", "Welcome to scNOT\u2019s documentation!", "cellot", "Usage"], "terms": {"data": [0, 3, 6, 8], "cell": [0, 2, 3, 4, 7, 8], "util": [0, 8], "loss": [0, 3, 8], "mmd": [0, 8], "model": [0, 1, 6, 8], "ae": [0, 8], "network": [0, 3, 8], "icnn": [0, 3, 8], "train": [0, 1, 8], "experi": [0, 6, 8], "summari": [0, 8], "evalu": [0, 1, 2, 4, 8], "flag": [0, 8], "helper": [0, 8], "loader": [0, 1, 5, 8], "viz": [0, 8], "i": [0, 1, 2, 3, 4, 5, 6, 7], "python": 7, "librari": 7, "singl": [1, 4, 7], "analysi": 7, "machin": 7, "learn": 7, "method": [3, 7], "It": 7, "implement": [2, 3, 4, 7], "two": [2, 7], "structur": [3, 7], "propos": 7, "paper": 7, "cellot": 7, "condot": 7, "offer": 7, "an": [0, 1, 2, 3, 4, 5, 6, 7], "intuit": 7, "api": 7, "check": 7, "out": [1, 6, 7], "usag": 7, "section": 7, "further": 7, "inform": [1, 5, 6, 7], "includ": [1, 5, 6, 7], "how": 7, "instal": 7, "project": 7, "index": [1, 7], "modul": [7, 8], "search": 7, "page": 7, "To": 9, "us": [0, 1, 2, 3, 4, 6, 9], "scnot": 9, "first": 9, "pip": 9, "clamp_w": [0, 4], "forward": [0, 3, 4], "penalize_w": [0, 4], "nonnegativelinear": [0, 4], "kernel": [0, 2, 4], "test_icnn_convex": [0, 4], "input": [0, 3, 4], "convex": 4, "neural": [3, 4], "class": [1, 3, 4, 5, 6], "arg": [1, 3, 4, 5, 6], "ani": [1, 3, 4], "kwarg": [0, 1, 3, 4, 5, 6], "base": [1, 3, 4, 5, 6], "nueral": 4, "variabl": [1, 2, 3, 4], "input_dim": [3, 4], "int": [1, 3, 4, 5], "dimens": [3, 4], "hidden_unit": [3, 4], "list": [1, 2, 3, 4, 6], "number": [3, 4], "unit": [3, 4], "each": [1, 2, 3, 4], "hidden": [3, 4], "layer": [3, 4], "activ": [3, 4], "str": [1, 4, 6], "emploi": [2, 4], "function": [0, 1, 3, 4, 6], "default": [0, 1, 3, 4, 5, 6], "leakyrelu": 4, "softplus_w_kernel": 4, "bool": [0, 1, 3, 4, 6], "whether": [0, 1, 3, 4, 6], "softplu": 4, "ensur": 4, "nonneg": 4, "weight": [3, 4], "fals": [1, 3, 4, 6], "softplus_beta": 4, "float": [0, 1, 2, 3, 4], "scale": [2, 4, 6], "1": [0, 1, 3, 4, 6], "fnorm_penalti": 4, "penalti": [3, 4], "strength": [3, 4], "neg": [3, 4], "0": [0, 1, 3, 4, 6], "kernel_init_fxn": 4, "intial": 4, "none": [0, 1, 2, 3, 4, 5, 6], "forcibli": 4, "set": [1, 2, 4, 6], "zero": 4, "x": [2, 4], "comput": [0, 2, 3, 4], "output": [0, 3, 4], "given": [3, 4], "some": [0, 3, 4], "transport": [2, 3, 4, 6, 8], "torch": [1, 3, 4], "tensor": [3, 4], "predict": [0, 2, 3, 4], "perturb": [0, 3, 4], "featur": [0, 3, 4, 6], "its": [3, 4, 6], "origin": 4, "accord": 4, "theori": 4, "gradient": [3, 4], "scalar": [4, 5], "w": [4, 6], "r": 4, "t": 4, "specif": 4, "sampl": [1, 2, 4], "here": 4, "linear": 4, "beta": [3, 4], "thi": 4, "build": [3, 4], "attribut": [1, 4, 6], "test": [1, 4], "instanc": [3, 4, 5], "inde": 4, "paramet": [0, 1, 2, 3, 4, 5, 6], "rais": 4, "assertionerror": 4, "compute_scalar_mmd": [0, 2], "mmd_distanc": [0, 2], "build_network": [0, 3], "build_opt": [0, 3], "compute_g_constraint": [0, 3], "compute_loss_f": [0, 3], "compute_loss_g": [0, 3], "compute_w2_dist": [0, 3], "restor": [0, 3, 6], "fgpair": [0, 3], "f": [0, 3], "g": [0, 3], "numerical_gradi": [0, 3], "clean_intensity_featur": [0, 8], "name": [0, 1, 6], "parse_feature_nam": [0, 8], "parse_raw_dd_data": [0, 8], "df": [0, 6], "randid": [0, 8], "distanc": [2, 3], "target": [0, 2, 3, 5, 6], "numpi": 2, "ndarrai": 2, "gamma": [2, 6], "between": [0, 1, 2, 3], "distribut": [1, 2], "refer": 2, "maximum": 2, "mean": [2, 3], "discrep": 2, "metric": 2, "measur": [2, 3], "report": 2, "unbias": 2, "estim": 2, "where": [1, 2, 5, 6], "expect": 2, "ar": [2, 3, 6], "averag": 2, "over": 2, "The": [0, 1, 2, 3, 6], "rbf": 2, "np": 2, "repres": [1, 2, 3], "drawn": 2, "from": [0, 1, 2, 3, 5, 6], "p": 2, "q": 2, "length": [2, 5], "return": [0, 1, 2, 3, 5, 6], "A": [1, 2, 3, 5, 6], "differ": [0, 1, 2], "y": 2, "random": [1, 2, 5], "config": [0, 1, 3, 5, 6], "object": [1, 3, 5, 6], "one": [1, 3, 6], "dual": 3, "opt": 3, "optim": [3, 5, 6], "potenti": 3, "specifi": [3, 6], "configur": [0, 1, 3, 5, 6], "form": 3, "addit": [0, 1, 3, 6], "indic": [1, 3, 6], "which": [0, 1, 3, 6], "type": 3, "perform": [1, 3], "sourc": [0, 3], "option": [3, 6], "2": [3, 6], "norm": 3, "wasserstein": 3, "after": [0, 3, 6], "previou": [3, 6], "state": [3, 6], "tupl": [1, 3, 6], "alia": 3, "field": 3, "param": 3, "fxn": 3, "ep": 3, "0001": 3, "numer": 3, "point": 3, "defin": [1, 3, 6], "posit": 3, "argument": [0, 1, 3, 6], "small": 3, "valu": [3, 6], "1e": 3, "4": 3, "anndatadataset": [0, 1], "__getitem__": [0, 1], "__len__": [0, 1], "load_cell_data": [0, 1], "read_list": [0, 1], "read_merged_anndata": [0, 1], "read_single_anndata": [0, 1], "split_cell_data": [0, 1], "split_cell_data_toggle_ood": [0, 1], "split_cell_data_train_test": [0, 1], "split_cell_data_train_test_ev": [0, 1], "cast_dataset_to_load": [0, 1], "cast_loader_to_iter": [0, 1, 5], "collect_serializable_flag": [0, 6], "flags_to_json": [0, 6], "get_flagdict": [0, 6], "rank_flag_modul": [0, 6], "write_flagfil": [0, 6], "dotdict": [0, 6], "dump_config": [0, 6], "flat_dict": [0, 6], "load_config": [0, 6], "nest_dict": [0, 1, 6], "parse_cli_opt": [0, 6], "parse_config_cli": [0, 5, 6], "split_rec": [0, 6], "symlink_to_logfil": [0, 6], "write_metadata": [0, 6], "dataset": [0, 1, 3], "anndata": [0, 1], "inherit": [1, 3], "load": [0, 1, 3, 5, 6], "ml": 1, "adata": 1, "consist": [1, 6], "major": 1, "ob": 1, "observ": 1, "label": [1, 3, 6], "pick": 1, "subset": 1, "whole": 1, "categori": 1, "categor": 1, "include_index": 1, "when": 1, "pass": [1, 3], "item": [1, 5, 6], "idx": 1, "get": 1, "size": 1, "split_on": 1, "return_a": [0, 1], "include_model_kwarg": [1, 6], "integr": [0, 1, 6], "ml_collect": [1, 6], "config_dict": 1, "configdict": [0, 1, 5, 6], "contain": [1, 5, 6], "split": 1, "order": [1, 6], "result": [1, 5], "request": 1, "read": 1, "storag": [1, 6], "sequenc": 1, "filepath": [1, 6], "pathlist": 1, "multipl": 1, "file": [1, 3, 5, 6], "merg": 1, "them": 1, "info": [0, 1, 6], "path": [1, 3, 5, 6], "train_test": 1, "manner": 1, "panda": 1, "seri": 1, "partit": 1, "holdout": 1, "kei": [1, 5, 6], "mode": [1, 6], "random_st": 1, "hold": 1, "ood": 1, "coordin": 1, "iid": 1, "stand": 1, "pair": [1, 6], "For": 1, "all": [1, 6], "half": 1, "indec": 1, "held": 1, "identifi": 1, "work": [1, 6], "choos": 1, "seed": 1, "reproduc": 1, "groupbi": 1, "dict": [1, 3, 5, 6], "If": 1, "nonempti": 1, "proport": 1, "same": 1, "group": 1, "stai": 1, "metadata": [1, 6], "e": 1, "test_siz": 1, "15": 1, "eval_s": 1, "valid": 1, "cast": 1, "either": 1, "dataload": 1, "cycle_al": [1, 5], "true": [0, 1, 3, 5, 6], "iter": 1, "regard": 6, "absl": 6, "flagvalu": 6, "keyflag": 6, "collect": 6, "serializ": 6, "onli": 6, "abl": 6, "transform": 6, "stream": 6, "byte": 6, "so": 6, "recov": [3, 6], "ident": 6, "possibl": 6, "cfg": 6, "blacklist": 6, "put": 6, "store": [5, 6], "json": 6, "format": 6, "NOT": 6, "being": 6, "module_nam": 6, "code": [3, 6], "sort": 6, "tensorflow": 6, "last": 6, "rank": 6, "include_json": 6, "flagfil": 6, "anoth": 6, "dot": 6, "notat": 6, "access": 6, "dictionari": 6, "dump": 6, "d": 6, "parent_kei": 6, "sep": 6, "unpars": 6, "locat": 6, "need": 6, "pars": 6, "as_dot_dict": 6, "command": 6, "line": 6, "k": 6, "v": 6, "loglink": 6, "outpath": 6, "argv": [5, 6], "write": [5, 6], "program": 6, "about": 6, "execut": 6, "time": 6, "save": 6, "packag": 8, "subpackag": 8, "submodul": 8, "content": 8, "preprocess": 8, "clean_axes_grid": [0, 6], "create_axes_grid": [0, 6], "create_map": [0, 6], "legend_from_lut": [0, 6], "legend_handl": [0, 6], "modify_legend": [0, 6], "plot_corr": [0, 6], "plot_margin": [0, 6], "plot_umap": [0, 6], "plot_umaps_binari": [0, 6], "pretty_print_featur": [0, 6], "scale_figs": [0, 6], "ax": 6, "xlabel": 6, "ylabel": 6, "nitem": 6, "ncol": 6, "figsiz": 6, "mappabl": 6, "lut": 6, "color": 6, "cmap": 6, "tab10": 6, "marker": 6, "markers": 6, "10": 6, "modifi": 6, "legend": 6, "ha": 6, "been": 6, "creat": [3, 6], "corr": 6, "title_pretty_print": 6, "xtick_pretty_print": 6, "qclip": 6, "5": 6, "handle_pprint": 6, "title_pprint": 6, "umap": 6, "": 6, "alpha": 6, "nrow": 6, "load_cellot_model": [0, 3], "other": 3, "depend": 3, "autoencod": [0, 3], "losscomp": [0, 3], "build_decod": [0, 3], "build_encod": [0, 3], "compute_encoding_shift": [0, 3], "decod": [0, 3], "encod": [0, 3], "conditionalautoencod": [0, 3], "condit": [0, 3], "dnn": [0, 3], "load_autoencoder_model": [0, 3], "load_network": [0, 3], "load_optim": [0, 3], "load_data": [0, 6], "load_model": [0, 6], "dosag": 0, "datatyp": 0, "drug": 0, "particular": 0, "transport_ca": [0, 8], "reconstruct": [0, 3], "transport_cellot": [0, 8], "control": [0, 3, 6], "transport_scgen": [0, 8], "under": [0, 3], "induc": 0, "shift": [0, 3], "otherwis": 0, "nn": 3, "regular": 3, "coeffici": 3, "latent_dim": 3, "latent": 3, "embed": [3, 6], "encoder_net": 3, "decoder_net": 3, "mse": 3, "squar": 3, "aeloss": 3, "aeoutput": 3, "revers": 3, "composit": 3, "correspond": [3, 6], "ouput": 3, "initi": 3, "consid": 3, "n_cat": 3, "equal": 3, "plu": 3, "hot": 3, "vector": 3, "extend": 3, "decode_a": 3, "dens": 3, "dinput": 3, "doutput": 3, "16": 3, "relu": 3, "dropout": 3, "batch_norm": 3, "net_fn": 3, "sequenti": 3, "deep": 3, "rate": 3, "batch": 3, "normal": 3, "requir": 3, "adam": 3, "both": 6, "also": 6, "logger": [0, 5], "flush": [0, 5], "log": [0, 5], "singlelogg": [0, 5], "max_item": 5, "1024": 5, "compute_scgen_shift": [0, 3], "generate_random_str": [0, 5], "name_expdir": [0, 5], "prepar": [0, 5], "write_config": [0, 5], "check_loss": [0, 5], "load_item_from_sav": [0, 5], "load_lr_schedul": [0, 5], "train_auto_encod": [0, 5], "train_cellot": [0, 5], "compute_drug_signature_differ": [0, 6], "compute_knn_enrich": [0, 6], "compute_mmd_df": [0, 6], "load_all_input": [0, 6], "load_condit": [0, 6], "load_projector": [0, 6], "patch_scgen_shift": [0, 6], "read_embedding_context": [0, 6], "n": 5, "8": 5, "gener": 5, "string": 5, "ascii": 5, "lowercas": 5, "letter": 5, "digit": 5, "automat": 5, "export": 5, "directori": 5, "yaml": 5, "outdir": 5, "treat": 6, "pushfwd": 6, "return_joint": 6, "ncell": 6, "subsampl": 6, "nrep": 6, "expdir": 6, "aedir": 6}, "objects": {"": [[0, 0, 0, "-", "cellot"]], "cellot": [[1, 0, 0, "-", "data"], [2, 0, 0, "-", "losses"], [3, 0, 0, "-", "models"], [4, 0, 0, "-", "networks"], [0, 0, 0, "-", "preprocess"], [5, 0, 0, "-", "train"], [0, 0, 0, "-", "transport"], [6, 0, 0, "-", "utils"]], "cellot.data": [[1, 0, 0, "-", "cell"], [1, 0, 0, "-", "utils"]], "cellot.data.cell": [[1, 1, 1, "", "AnnDataDataset"], [1, 3, 1, "", "load_cell_data"], [1, 3, 1, "", "read_list"], [1, 3, 1, "", "read_merged_anndata"], [1, 3, 1, "", "read_single_anndata"], [1, 3, 1, "", "split_cell_data"], [1, 3, 1, "", "split_cell_data_toggle_ood"], [1, 3, 1, "", "split_cell_data_train_test"], [1, 3, 1, "", "split_cell_data_train_test_eval"]], "cellot.data.cell.AnnDataDataset": [[1, 2, 1, "", "__getitem__"], [1, 2, 1, "", "__len__"]], "cellot.data.utils": [[1, 3, 1, "", "cast_dataset_to_loader"], [1, 3, 1, "", "cast_loader_to_iterator"]], "cellot.losses": [[2, 0, 0, "-", "mmd"]], "cellot.losses.mmd": [[2, 3, 1, "", "compute_scalar_mmd"], [2, 3, 1, "", "mmd_distance"]], "cellot.models": [[3, 0, 0, "-", "ae"], [3, 0, 0, "-", "cellot"]], "cellot.models.ae": [[3, 1, 1, "", "AutoEncoder"], [3, 1, 1, "", "ConditionalAutoEncoder"], [3, 1, 1, "", "DNN"], [3, 3, 1, "", "compute_scgen_shift"], [3, 3, 1, "", "dnn"], [3, 3, 1, "", "load_autoencoder_model"], [3, 3, 1, "", "load_networks"], [3, 3, 1, "", "load_optimizer"]], "cellot.models.ae.AutoEncoder": [[3, 4, 1, "", "LossComps"], [3, 4, 1, "", "Outputs"], [3, 2, 1, "", "build_decoder"], [3, 2, 1, "", "build_encoder"], [3, 2, 1, "", "compute_encoding_shift"], [3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"], [3, 2, 1, "", "forward"], [3, 2, 1, "", "loss"], [3, 2, 1, "", "outputs"], [3, 2, 1, "", "predict"]], "cellot.models.ae.ConditionalAutoEncoder": [[3, 2, 1, "", "build_decoder"], [3, 2, 1, "", "build_encoder"], [3, 2, 1, "", "condition"], [3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"], [3, 2, 1, "", "forward"], [3, 2, 1, "", "outputs"], [3, 2, 1, "", "predict"]], "cellot.models.cellot": [[3, 1, 1, "", "CellOT"], [3, 1, 1, "", "FGPair"], [3, 3, 1, "", "compute_loss_f"], [3, 3, 1, "", "compute_loss_g"], [3, 3, 1, "", "load_cellot_model"], [3, 3, 1, "", "numerical_gradient"]], "cellot.models.cellot.CellOT": [[3, 2, 1, "", "build_networks"], [3, 2, 1, "", "build_opts"], [3, 2, 1, "", "compute_g_constraint"], [3, 2, 1, "", "compute_loss_f"], [3, 2, 1, "", "compute_loss_g"], [3, 2, 1, "", "compute_w2_distance"], [3, 2, 1, "", "predict"], [3, 2, 1, "", "restore"]], "cellot.models.cellot.FGPair": [[3, 4, 1, "", "f"], [3, 4, 1, "", "g"]], "cellot.networks": [[4, 0, 0, "-", "icnns"]], "cellot.networks.icnns": [[4, 1, 1, "", "ICNN"], [4, 1, 1, "", "NonNegativeLinear"], [4, 3, 1, "", "test_icnn_convexity"]], "cellot.networks.icnns.ICNN": [[4, 2, 1, "", "clamp_w"], [4, 2, 1, "", "forward"], [4, 2, 1, "", "penalize_w"], [4, 2, 1, "", "transport"]], "cellot.networks.icnns.NonNegativeLinear": [[4, 2, 1, "", "forward"], [4, 2, 1, "", "kernel"]], "cellot.preprocess": [[0, 3, 1, "", "clean_intensity_feature"], [0, 3, 1, "", "parse_feature_name"], [0, 3, 1, "", "parse_raw_dd_data"], [0, 3, 1, "", "randid"]], "cellot.train": [[5, 0, 0, "-", "experiment"], [5, 0, 0, "-", "summary"], [5, 0, 0, "-", "train"], [5, 0, 0, "-", "utils"]], "cellot.train.experiment": [[5, 3, 1, "", "generate_random_string"], [5, 3, 1, "", "name_expdir"], [5, 3, 1, "", "parse_config_cli"], [5, 3, 1, "", "prepare"], [5, 3, 1, "", "write_config"]], "cellot.train.summary": [[5, 1, 1, "", "Logger"], [5, 1, 1, "", "SingleLogger"]], "cellot.train.summary.Logger": [[5, 2, 1, "", "flush"], [5, 2, 1, "", "log"]], "cellot.train.summary.SingleLogger": [[5, 2, 1, "", "flush"], [5, 2, 1, "", "log"]], "cellot.train.train": [[5, 3, 1, "", "check_loss"], [5, 3, 1, "", "load_item_from_save"], [5, 3, 1, "", "load_lr_scheduler"], [5, 3, 1, "", "train_auto_encoder"], [5, 3, 1, "", "train_cellot"]], "cellot.train.utils": [[5, 3, 1, "", "cast_loader_to_iterator"], [5, 3, 1, "", "check_loss"], [5, 3, 1, "", "load_item_from_save"]], "cellot.transport": [[0, 3, 1, "", "transport"], [0, 3, 1, "", "transport_cae"], [0, 3, 1, "", "transport_cellot"], [0, 3, 1, "", "transport_scgen"]], "cellot.utils": [[6, 0, 0, "-", "evaluate"], [6, 0, 0, "-", "flags"], [6, 0, 0, "-", "helpers"], [6, 0, 0, "-", "loaders"], [6, 0, 0, "-", "viz"]], "cellot.utils.evaluate": [[6, 3, 1, "", "compute_drug_signature_differences"], [6, 3, 1, "", "compute_knn_enrichment"], [6, 3, 1, "", "compute_mmd_df"], [6, 3, 1, "", "load_all_inputs"], [6, 3, 1, "", "load_conditions"], [6, 3, 1, "", "load_projectors"], [6, 3, 1, "", "patch_scgen_shift"], [6, 3, 1, "", "read_embedding_context"]], "cellot.utils.flags": [[6, 3, 1, "", "collect_serializable_flags"], [6, 3, 1, "", "flags_to_json"], [6, 3, 1, "", "get_flagdict"], [6, 3, 1, "", "rank_flag_module"], [6, 3, 1, "", "write_flagfile"]], "cellot.utils.helpers": [[6, 1, 1, "", "DotDict"], [6, 3, 1, "", "dump_config"], [6, 3, 1, "", "flat_dict"], [6, 3, 1, "", "load_config"], [6, 3, 1, "", "nest_dict"], [6, 3, 1, "", "parse_cli_opts"], [6, 3, 1, "", "parse_config_cli"], [6, 3, 1, "", "split_rec"], [6, 3, 1, "", "symlink_to_logfile"], [6, 3, 1, "", "write_metadata"]], "cellot.utils.loaders": [[6, 3, 1, "", "load"], [6, 3, 1, "", "load_data"], [6, 3, 1, "", "load_model"]], "cellot.utils.viz": [[6, 3, 1, "", "clean_axes_grid"], [6, 3, 1, "", "create_axes_grid"], [6, 3, 1, "", "create_map"], [6, 3, 1, "", "legend_from_lut"], [6, 3, 1, "", "legend_handle"], [6, 3, 1, "", "modify_legend"], [6, 3, 1, "", "plot_corrs"], [6, 3, 1, "", "plot_marginals"], [6, 3, 1, "", "plot_umaps"], [6, 3, 1, "", "plot_umaps_binary"], [6, 3, 1, "", "pretty_print_feature"], [6, 3, 1, "", "scale_figsize"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"cellot": [0, 1, 2, 3, 4, 5, 6, 8], "packag": [0, 1, 2, 3, 4, 5, 6], "subpackag": 0, "submodul": [0, 1, 2, 3, 4, 5, 6], "preprocess": 0, "modul": [0, 1, 2, 3, 4, 5, 6], "transport": 0, "content": [0, 1, 2, 3, 4, 5, 6, 7], "data": 1, "cell": 1, "util": [1, 5, 6], "loss": 2, "mmd": 2, "model": 3, "ae": 3, "network": 4, "icnn": 4, "train": 5, "experi": 5, "summari": 5, "evalu": 6, "flag": 6, "helper": 6, "loader": 6, "viz": 6, "welcom": 7, "scnot": 7, "": 7, "document": 7, "indic": 7, "tabl": 7, "onedr": [], "usag": 9, "instal": 9}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"cellot package": [[0, "cellot-package"]], "Subpackages": [[0, "subpackages"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"]], "cellot.preprocess module": [[0, "module-cellot.preprocess"]], "cellot.transport module": [[0, "module-cellot.transport"]], "Module contents": [[0, "module-cellot"], [1, "module-cellot.data"], [2, "module-cellot.losses"], [3, "module-cellot.models"], [4, "module-cellot.networks"], [5, "module-cellot.train"], [6, "module-cellot.utils"]], "cellot.data package": [[1, "cellot-data-package"]], "cellot.data.cell module": [[1, "module-cellot.data.cell"]], "cellot.data.utils module": [[1, "module-cellot.data.utils"]], "cellot.losses package": [[2, "cellot-losses-package"]], "cellot.losses.mmd module": [[2, "module-cellot.losses.mmd"]], "cellot.models package": [[3, "cellot-models-package"]], "cellot.models.ae module": [[3, "module-cellot.models.ae"]], "cellot.models.cellot module": [[3, "module-cellot.models.cellot"]], "cellot.networks package": [[4, "cellot-networks-package"]], "cellot.networks.icnns module": [[4, "module-cellot.networks.icnns"]], "cellot.train package": [[5, "cellot-train-package"]], "cellot.train.experiment module": [[5, "module-cellot.train.experiment"]], "cellot.train.summary module": [[5, "module-cellot.train.summary"]], "cellot.train.train module": [[5, "module-cellot.train.train"]], "cellot.train.utils module": [[5, "module-cellot.train.utils"]], "cellot.utils package": [[6, "cellot-utils-package"]], "cellot.utils.evaluate module": [[6, "module-cellot.utils.evaluate"]], "cellot.utils.flags module": [[6, "module-cellot.utils.flags"]], "cellot.utils.helpers module": [[6, "module-cellot.utils.helpers"]], "cellot.utils.loaders module": [[6, "module-cellot.utils.loaders"]], "cellot.utils.viz module": [[6, "module-cellot.utils.viz"]], "Welcome to scNOT\u2019s documentation!": [[7, "welcome-to-scnot-s-documentation"]], "Indices and tables": [[7, "indices-and-tables"]], "Contents": [[7, "contents"]], "cellot": [[8, "cellot"]], "Usage": [[9, "usage"]], "Installation": [[9, "installation"]]}, "indexentries": {"cellot": [[0, "module-cellot"]], "cellot.preprocess": [[0, "module-cellot.preprocess"]], "cellot.transport": [[0, "module-cellot.transport"]], "clean_intensity_feature() (in module cellot.preprocess)": [[0, "cellot.preprocess.clean_intensity_feature"]], "module": [[0, "module-cellot"], [0, "module-cellot.preprocess"], [0, "module-cellot.transport"], [1, "module-cellot.data"], [1, "module-cellot.data.cell"], [1, "module-cellot.data.utils"], [2, "module-cellot.losses"], [2, "module-cellot.losses.mmd"], [3, "module-cellot.models"], [3, "module-cellot.models.ae"], [3, "module-cellot.models.cellot"], [4, "module-cellot.networks"], [4, "module-cellot.networks.icnns"], [5, "module-cellot.train"], [5, "module-cellot.train.experiment"], [5, "module-cellot.train.summary"], [5, "module-cellot.train.train"], [5, "module-cellot.train.utils"], [6, "module-cellot.utils"], [6, "module-cellot.utils.evaluate"], [6, "module-cellot.utils.flags"], [6, "module-cellot.utils.helpers"], [6, "module-cellot.utils.loaders"], [6, "module-cellot.utils.viz"]], "parse_feature_name() (in module cellot.preprocess)": [[0, "cellot.preprocess.parse_feature_name"]], "parse_raw_dd_data() (in module cellot.preprocess)": [[0, "cellot.preprocess.parse_raw_dd_data"]], "randid() (in module cellot.preprocess)": [[0, "cellot.preprocess.randid"]], "transport() (in module cellot.transport)": [[0, "cellot.transport.transport"]], "transport_cae() (in module cellot.transport)": [[0, "cellot.transport.transport_cae"]], "transport_cellot() (in module cellot.transport)": [[0, "cellot.transport.transport_cellot"]], "transport_scgen() (in module cellot.transport)": [[0, "cellot.transport.transport_scgen"]], "anndatadataset (class in cellot.data.cell)": [[1, "cellot.data.cell.AnnDataDataset"]], "__getitem__() (cellot.data.cell.anndatadataset method)": [[1, "cellot.data.cell.AnnDataDataset.__getitem__"]], "__len__() (cellot.data.cell.anndatadataset method)": [[1, "cellot.data.cell.AnnDataDataset.__len__"]], "cast_dataset_to_loader() (in module cellot.data.utils)": [[1, "cellot.data.utils.cast_dataset_to_loader"]], "cast_loader_to_iterator() (in module cellot.data.utils)": [[1, "cellot.data.utils.cast_loader_to_iterator"]], "cellot.data": [[1, "module-cellot.data"]], "cellot.data.cell": [[1, "module-cellot.data.cell"]], "cellot.data.utils": [[1, "module-cellot.data.utils"]], "load_cell_data() (in module cellot.data.cell)": [[1, "cellot.data.cell.load_cell_data"]], "read_list() (in module cellot.data.cell)": [[1, "cellot.data.cell.read_list"]], "read_merged_anndata() (in module cellot.data.cell)": [[1, "cellot.data.cell.read_merged_anndata"]], "read_single_anndata() (in module cellot.data.cell)": [[1, "cellot.data.cell.read_single_anndata"]], "split_cell_data() (in module cellot.data.cell)": [[1, "cellot.data.cell.split_cell_data"]], "split_cell_data_toggle_ood() (in module cellot.data.cell)": [[1, "cellot.data.cell.split_cell_data_toggle_ood"]], "split_cell_data_train_test() (in module cellot.data.cell)": [[1, "cellot.data.cell.split_cell_data_train_test"]], "split_cell_data_train_test_eval() (in module cellot.data.cell)": [[1, "cellot.data.cell.split_cell_data_train_test_eval"]], "cellot.losses": [[2, "module-cellot.losses"]], "cellot.losses.mmd": [[2, "module-cellot.losses.mmd"]], "compute_scalar_mmd() (in module cellot.losses.mmd)": [[2, "cellot.losses.mmd.compute_scalar_mmd"]], "mmd_distance() (in module cellot.losses.mmd)": [[2, "cellot.losses.mmd.mmd_distance"]], "autoencoder (class in cellot.models.ae)": [[3, "cellot.models.ae.AutoEncoder"]], "cellot (class in cellot.models.cellot)": [[3, "cellot.models.cellot.CellOT"]], "conditionalautoencoder (class in cellot.models.ae)": [[3, "cellot.models.ae.ConditionalAutoEncoder"]], "dnn (class in cellot.models.ae)": [[3, "cellot.models.ae.DNN"]], "fgpair (class in cellot.models.cellot)": [[3, "cellot.models.cellot.FGPair"]], "losscomps (cellot.models.ae.autoencoder attribute)": [[3, "cellot.models.ae.AutoEncoder.LossComps"]], "outputs (cellot.models.ae.autoencoder attribute)": [[3, "cellot.models.ae.AutoEncoder.Outputs"]], "build_decoder() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.build_decoder"]], "build_decoder() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.build_decoder"]], "build_encoder() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.build_encoder"]], "build_encoder() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.build_encoder"]], "build_networks() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.build_networks"]], "build_opts() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.build_opts"]], "cellot.models": [[3, "module-cellot.models"]], "cellot.models.ae": [[3, "module-cellot.models.ae"]], "cellot.models.cellot": [[3, "module-cellot.models.cellot"]], "compute_encoding_shift() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.compute_encoding_shift"]], "compute_g_constraint() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.compute_g_constraint"]], "compute_loss_f() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.compute_loss_f"]], "compute_loss_f() (in module cellot.models.cellot)": [[3, "cellot.models.cellot.compute_loss_f"]], "compute_loss_g() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.compute_loss_g"]], "compute_loss_g() (in module cellot.models.cellot)": [[3, "cellot.models.cellot.compute_loss_g"]], "compute_scgen_shift() (in module cellot.models.ae)": [[3, "cellot.models.ae.compute_scgen_shift"]], "compute_w2_distance() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.compute_w2_distance"]], "condition() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.condition"]], "decode() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.decode"]], "decode() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.decode"]], "dnn() (in module cellot.models.ae)": [[3, "cellot.models.ae.dnn"]], "encode() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.encode"]], "encode() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.encode"]], "f (cellot.models.cellot.fgpair attribute)": [[3, "cellot.models.cellot.FGPair.f"]], "forward() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.forward"]], "forward() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.forward"]], "g (cellot.models.cellot.fgpair attribute)": [[3, "cellot.models.cellot.FGPair.g"]], "load_autoencoder_model() (in module cellot.models.ae)": [[3, "cellot.models.ae.load_autoencoder_model"]], "load_cellot_model() (in module cellot.models.cellot)": [[3, "cellot.models.cellot.load_cellot_model"]], "load_networks() (in module cellot.models.ae)": [[3, "cellot.models.ae.load_networks"]], "load_optimizer() (in module cellot.models.ae)": [[3, "cellot.models.ae.load_optimizer"]], "loss() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.loss"]], "numerical_gradient() (in module cellot.models.cellot)": [[3, "cellot.models.cellot.numerical_gradient"]], "outputs() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.outputs"]], "outputs() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.outputs"]], "predict() (cellot.models.ae.autoencoder method)": [[3, "cellot.models.ae.AutoEncoder.predict"]], "predict() (cellot.models.ae.conditionalautoencoder method)": [[3, "cellot.models.ae.ConditionalAutoEncoder.predict"]], "predict() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.predict"]], "restore() (cellot.models.cellot.cellot method)": [[3, "cellot.models.cellot.CellOT.restore"]], "icnn (class in cellot.networks.icnns)": [[4, "cellot.networks.icnns.ICNN"]], "nonnegativelinear (class in cellot.networks.icnns)": [[4, "cellot.networks.icnns.NonNegativeLinear"]], "cellot.networks": [[4, "module-cellot.networks"]], "cellot.networks.icnns": [[4, "module-cellot.networks.icnns"]], "clamp_w() (cellot.networks.icnns.icnn method)": [[4, "cellot.networks.icnns.ICNN.clamp_w"]], "forward() (cellot.networks.icnns.icnn method)": [[4, "cellot.networks.icnns.ICNN.forward"]], "forward() (cellot.networks.icnns.nonnegativelinear method)": [[4, "cellot.networks.icnns.NonNegativeLinear.forward"]], "kernel() (cellot.networks.icnns.nonnegativelinear method)": [[4, "cellot.networks.icnns.NonNegativeLinear.kernel"]], "penalize_w() (cellot.networks.icnns.icnn method)": [[4, "cellot.networks.icnns.ICNN.penalize_w"]], "test_icnn_convexity() (in module cellot.networks.icnns)": [[4, "cellot.networks.icnns.test_icnn_convexity"]], "transport() (cellot.networks.icnns.icnn method)": [[4, "cellot.networks.icnns.ICNN.transport"]], "logger (class in cellot.train.summary)": [[5, "cellot.train.summary.Logger"]], "singlelogger (class in cellot.train.summary)": [[5, "cellot.train.summary.SingleLogger"]], "cast_loader_to_iterator() (in module cellot.train.utils)": [[5, "cellot.train.utils.cast_loader_to_iterator"]], "cellot.train": [[5, "module-cellot.train"]], "cellot.train.experiment": [[5, "module-cellot.train.experiment"]], "cellot.train.summary": [[5, "module-cellot.train.summary"]], "cellot.train.train": [[5, "module-cellot.train.train"]], "cellot.train.utils": [[5, "module-cellot.train.utils"]], "check_loss() (in module cellot.train.train)": [[5, "cellot.train.train.check_loss"]], "check_loss() (in module cellot.train.utils)": [[5, "cellot.train.utils.check_loss"]], "flush() (cellot.train.summary.logger method)": [[5, "cellot.train.summary.Logger.flush"]], "flush() (cellot.train.summary.singlelogger method)": [[5, "cellot.train.summary.SingleLogger.flush"]], "generate_random_string() (in module cellot.train.experiment)": [[5, "cellot.train.experiment.generate_random_string"]], "load_item_from_save() (in module cellot.train.train)": [[5, "cellot.train.train.load_item_from_save"]], "load_item_from_save() (in module cellot.train.utils)": [[5, "cellot.train.utils.load_item_from_save"]], "load_lr_scheduler() (in module cellot.train.train)": [[5, "cellot.train.train.load_lr_scheduler"]], "log() (cellot.train.summary.logger method)": [[5, "cellot.train.summary.Logger.log"]], "log() (cellot.train.summary.singlelogger method)": [[5, "cellot.train.summary.SingleLogger.log"]], "name_expdir() (in module cellot.train.experiment)": [[5, "cellot.train.experiment.name_expdir"]], "parse_config_cli() (in module cellot.train.experiment)": [[5, "cellot.train.experiment.parse_config_cli"]], "prepare() (in module cellot.train.experiment)": [[5, "cellot.train.experiment.prepare"]], "train_auto_encoder() (in module cellot.train.train)": [[5, "cellot.train.train.train_auto_encoder"]], "train_cellot() (in module cellot.train.train)": [[5, "cellot.train.train.train_cellot"]], "write_config() (in module cellot.train.experiment)": [[5, "cellot.train.experiment.write_config"]], "dotdict (class in cellot.utils.helpers)": [[6, "cellot.utils.helpers.DotDict"]], "cellot.utils": [[6, "module-cellot.utils"]], "cellot.utils.evaluate": [[6, "module-cellot.utils.evaluate"]], "cellot.utils.flags": [[6, "module-cellot.utils.flags"]], "cellot.utils.helpers": [[6, "module-cellot.utils.helpers"]], "cellot.utils.loaders": [[6, "module-cellot.utils.loaders"]], "cellot.utils.viz": [[6, "module-cellot.utils.viz"]], "clean_axes_grid() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.clean_axes_grid"]], "collect_serializable_flags() (in module cellot.utils.flags)": [[6, "cellot.utils.flags.collect_serializable_flags"]], "compute_drug_signature_differences() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.compute_drug_signature_differences"]], "compute_knn_enrichment() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.compute_knn_enrichment"]], "compute_mmd_df() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.compute_mmd_df"]], "create_axes_grid() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.create_axes_grid"]], "create_map() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.create_map"]], "dump_config() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.dump_config"]], "flags_to_json() (in module cellot.utils.flags)": [[6, "cellot.utils.flags.flags_to_json"]], "flat_dict() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.flat_dict"]], "get_flagdict() (in module cellot.utils.flags)": [[6, "cellot.utils.flags.get_flagdict"]], "legend_from_lut() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.legend_from_lut"]], "legend_handle() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.legend_handle"]], "load() (in module cellot.utils.loaders)": [[6, "cellot.utils.loaders.load"]], "load_all_inputs() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.load_all_inputs"]], "load_conditions() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.load_conditions"]], "load_config() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.load_config"]], "load_data() (in module cellot.utils.loaders)": [[6, "cellot.utils.loaders.load_data"]], "load_model() (in module cellot.utils.loaders)": [[6, "cellot.utils.loaders.load_model"]], "load_projectors() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.load_projectors"]], "modify_legend() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.modify_legend"]], "nest_dict() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.nest_dict"]], "parse_cli_opts() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.parse_cli_opts"]], "parse_config_cli() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.parse_config_cli"]], "patch_scgen_shift() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.patch_scgen_shift"]], "plot_corrs() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.plot_corrs"]], "plot_marginals() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.plot_marginals"]], "plot_umaps() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.plot_umaps"]], "plot_umaps_binary() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.plot_umaps_binary"]], "pretty_print_feature() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.pretty_print_feature"]], "rank_flag_module() (in module cellot.utils.flags)": [[6, "cellot.utils.flags.rank_flag_module"]], "read_embedding_context() (in module cellot.utils.evaluate)": [[6, "cellot.utils.evaluate.read_embedding_context"]], "scale_figsize() (in module cellot.utils.viz)": [[6, "cellot.utils.viz.scale_figsize"]], "split_rec() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.split_rec"]], "symlink_to_logfile() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.symlink_to_logfile"]], "write_flagfile() (in module cellot.utils.flags)": [[6, "cellot.utils.flags.write_flagfile"]], "write_metadata() (in module cellot.utils.helpers)": [[6, "cellot.utils.helpers.write_metadata"]]}})